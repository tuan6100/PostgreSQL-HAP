apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-patroni-config
  namespace: patroni
data:
  filebeat.yml: |-
    filebeat.modules:
      - module: postgresql
        log:
          enabled: true
          var.paths: ["/var/lib/postgresql/data/pgroot/data/pg_log/*.csv"]
    
    filebeat.input:
      - type: filestream
        id: postgresql-filestream-id
        enabled: true
        parsers:
          - multiline:
            type: pattern
            pattern: '^\[\d+\]'
            negate: true
            match: after
      
    filebeat.autodiscover:
      providers:
        - type: kubernetes
          node: ${NODE_NAME}
          hints.enabled: true
          use_kubeadm: true
          hints.default_config:
            type: filestream
            id: kubernetes-container-logs-${data.kubernetes.pod.name}-${data.kubernetes.container.id}
    
    processors:
      - dissect:
          tokenizer: '"%{postgresql.log.timestamp} UTC,\"%{user.name}\",\"%{postgresql.log.database}\",%{process.pid},\"%{postgresql.log.client_addr}:%{postgresql.log.client_port}\",%{postgresql.log.session_id},%{postgresql.log.session_line_num},\"%{postgresql.log.command_tag}\",\"%{postgresql.log.session_start_time} UTC\",%{postgresql.log.virtual_transaction_id}/%{postgresql.log.transaction_id},%{log.level},%{postgresql.log.sql_state_code},\"%{+message}"%{?}",%{+remaining_fields}"'
          field: "message"
          target_prefix: ""
      - dissect:
          when:
            contains:
              message: '"duration: '
            not:
              contains:
                message: 'statement:'
          tokenizer: '"%{postgresql.log.timestamp} UTC,\"%{user.name}\",\"%{postgresql.log.database}\",%{process.pid},\"%{postgresql.log.client_addr}:%{postgresql.log.client_port}\",%{postgresql.log.session_id},%{postgresql.log.session_line_num},\"%{postgresql.log.command_tag}\",\"%{postgresql.log.session_start_time} UTC\",%{postgresql.log.virtual_transaction_id}/%{postgresql.log.transaction_id},%{log.level},%{postgresql.log.sql_state_code},\"duration: %{duration_ms} ms\",%{?},%{?},%{?},%{?},%{?},%{?},%{?},\"%{?}\",\"%{postgresql.log.backend_type}\",%{?},%{postgresql.log.tracking_id}"'
          field: "message"
          target_prefix: ""
      - convert:
          fields:
            - {from: "process.pid", type: "integer"}
            - {from: "postgresql.log.client_port", type: "integer"}
            - {from: "postgresql.log.session_line_num", type: "integer"}
            - {from: "postgresql.log.transaction_id", type: "integer"}
            - {from: "duration_ms", to: "postgresql.log.duration_ms", type: "float"}
          ignore_missing: true
          fail_on_error: false

    output.elasticsearch:
      hosts: ["${ELASTICSEARCH_HOST}"]
      index: "filebeat-postgresql-%{+yyyy.MM.dd}"
    
    setup.template.name: "filebeat-postgresql"
    setup.template.pattern: "filebeat-postgresql-*"
    setup.dashboards.enabled: true
    
    setup.ilm.enabled: false
    
    setup.kibana:
      host: "${KIBANA_HOST}"
    
    logging.level: debug
    logging.to_files: true
    logging.files:
      path: "/usr/share/filebeat/logs"
      name: "filebeat"
      keepfiles: 10
      permissions: 0640
    logging.selectors: ["harvester", "input"]
    
