apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-patroni-config
  namespace: elk-stack
data:
  logstash.conf: |-
    input {
      # Nhận log từ Filebeat
      beats {
        port => 5044
        tags => ["filebeat", "postgresql_logs"]
      }
    
      # Collect metrics from PostgreSQL master via JDBC
      jdbc {
        jdbc_connection_string => "jdbc:postgresql://postgresql-master.default:5432/postgres"
        jdbc_user => "tuan"
        jdbc_password => "20226100"
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.7.5.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        statement => "SELECT datid, usename, application_name, client_addr::text, backend_start, query_start, state, query FROM pg_stat_activity"
        schedule => "0 * * * *"
        tags => ["postgresql_activity"]
      }
    
      jdbc {
        jdbc_connection_string => "jdbc:postgresql://postgresql-master.default:5432/postgres"
        jdbc_user => "tuan"
        jdbc_password => "20226100"
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.7.5.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        statement => "SELECT datname, xact_commit, xact_rollback, blks_read, blks_hit, tup_returned, tup_fetched, tup_inserted, tup_updated, tup_deleted FROM pg_stat_database WHERE datname NOT LIKE 'template%'"
        schedule => "0 * * * *"
        tags => ["postgresql_stats"]
      }
    
      jdbc {
        jdbc_connection_string => "jdbc:postgresql://postgresql-master.default:5432/postgres"
        jdbc_user => "tuan"
        jdbc_password => "20226100"
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.7.5.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        statement => "SELECT now() as timestamp, pg_current_wal_lsn()::text as current_wal_lsn, version() as version"
        schedule => "0 * * * *"
        tags => ["postgresql_info"]
      }
    
      jdbc {
        jdbc_connection_string => "jdbc:postgresql://postgresql-master.default:5432/postgres"
        jdbc_user => "tuan"
        jdbc_password => "20226100"
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.7.5.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        statement => "SELECT usename, application_name, client_addr::text, state, sent_lsn::text, write_lsn::text, flush_lsn::text, replay_lsn::text, write_lag::text, flush_lag::text, replay_lag::text, sync_state FROM pg_stat_replication"
        schedule => "0 * * * *"
        tags => ["postgresql_replication"]
      }
    
      # Collect Patroni API metrics
      http_poller {
        urls => {
          patroni_cluster => {
            method => get
            url => "http://patroni-0.patroni:8008/cluster"
            headers => {
              Accept => "application/json"
            }
          }
        }
        request_timeout => 60
        schedule => { every => "1m" }
        codec => "json"
        metadata_target => "patroni_cluster"
        tags => ["patroni_cluster"]
      }
    }
    
    filter {
      if "postgresql_logs" in [tags] {
        # Phân tích log cơ bản trước
        grok {
          match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} \[%{NUMBER:pid}\] %{WORD:log_level}:  %{GREEDYDATA:log_message}" }
        }
    
        # Phân tích các truy vấn SQL
        if [log_message] =~ "statement:" {
          grok {
            match => { "log_message" => ".*statement: (?<sql_query>.*)" }
          }
          if [sql_query] =~ "^SELECT" {
            mutate { add_field => { "query_type" => "SELECT" } }
          } else if [sql_query] =~ "^INSERT" {
            mutate { add_field => { "query_type" => "INSERT" } }
          } else if [sql_query] =~ "^UPDATE" {
            mutate { add_field => { "query_type" => "UPDATE" } }
          } else if [sql_query] =~ "^DELETE" {
            mutate { add_field => { "query_type" => "DELETE" } }
          } else if [sql_query] =~ "^(CREATE|ALTER|DROP|TRUNCATE)" {
            mutate { add_field => { "query_type" => "DDL" } }
          } else {
            mutate { add_field => { "query_type" => "OTHER" } }
          }
        }

        # Phân tích thông tin EXPLAIN ANALYZE cho định dạng một dòng
        if [log_message] =~ "duration:" {
          # Trích xuất thời gian thực thi
          grok {
            match => { "log_message" => "duration: %{NUMBER:query_duration:float} ms" }
            tag_on_failure => ["explain_duration_parse_failure"]
          }
    
          # Trích xuất query text từ plan
          grok {
            match => { "log_message" => ".*plan: Query Text: (?<query_text>[^;]+);" }
            tag_on_failure => ["explain_query_parse_failure"]
          }
    
          # Tạo trường execution_plan chứa toàn bộ kế hoạch thực thi
          grok {
            match => { "log_message" => ".*plan: (?<execution_plan>.*)" }
            tag_on_failure => ["explain_plan_parse_failure"]
          }
    
          # Trích xuất các thông số chi tiết từ plan
          if [execution_plan] {
            # Phân tích loại scan (Seq Scan, Index Scan, etc.)
            grok {
              match => { "execution_plan" => "(?<scan_type>(Seq Scan|Index Scan|Index Only Scan|Bitmap Heap Scan|Bitmap Index Scan|Nested Loop|Hash Join|Merge Join|Sort|Limit|Aggregate|GroupAggregate|HashAggregate))" }
              tag_on_failure => []
            }
    
            # Trích xuất thông tin cost
            grok {
              match => { "execution_plan" => "cost=%{NUMBER:cost_start:float}\.\.%{NUMBER:cost_end:float}" }
              tag_on_failure => []
            }
    
            # Trích xuất thông tin rows ước tính
            grok {
              match => { "execution_plan" => "rows=%{NUMBER:estimated_rows:integer}" }
              tag_on_failure => []
            }
    
            # Trích xuất thông tin width
            grok {
              match => { "execution_plan" => "width=%{NUMBER:width:integer}" }
              tag_on_failure => []
            }
    
            # Trích xuất thông tin thời gian thực tế
            grok {
              match => { "execution_plan" => "actual time=%{NUMBER:actual_time_start:float}\.\.%{NUMBER:actual_time_end:float}" }
              tag_on_failure => []
            }
    
            # Trích xuất số rows thực tế
            grok {
              match => { "execution_plan" => "rows=%{NUMBER}.*actual.*rows=%{NUMBER:actual_rows:integer}" }
              tag_on_failure => []
            }
    
            # Trích xuất số loops
            grok {
              match => { "execution_plan" => "loops=%{NUMBER:loops:integer}" }
              tag_on_failure => []
            }
    
            # Trích xuất điều kiện Filter nếu có
            grok {
              match => { "execution_plan" => "Filter: (?<filter_condition>.*?) (Rows Removed|$)" }
              tag_on_failure => []
            }
    
            # Trích xuất Rows Removed by Filter nếu có
            grok {
              match => { "execution_plan" => "Rows Removed by Filter: %{NUMBER:rows_removed:integer}" }
              tag_on_failure => []
            }
          }
    
          # Thêm các trường tính toán
          if [actual_time_end] and [loops] {
            ruby {
              code => "
                if event.get('actual_time_end') && event.get('loops')
                  total_time = event.get('actual_time_end').to_f * event.get('loops').to_f
                  event.set('total_execution_time', total_time)
                end
              "
            }
          }
    
          # Tính hiệu quả của ước lượng
          if [estimated_rows] and [actual_rows] {
            ruby {
              code => "
                if event.get('estimated_rows') && event.get('actual_rows') && event.get('estimated_rows') > 0
                  estimation_ratio = event.get('actual_rows').to_f / event.get('estimated_rows').to_f
                  event.set('estimation_accuracy', estimation_ratio)
                end
              "
            }
          }
    
          # Đánh dấu là log chứa thông tin execution plan
          mutate { 
            add_field => { "event_type" => "explain_analyze" }
            add_tag => ["execution_plan"]
            remove_tag => ["_grokparsefailure"]
          }
        }

        # Phân tích các thông báo Patroni và replication
        if [log_message] =~ "replication" {
          mutate { add_field => { "event_type" => "replication" } }
        }
    
        if [log_message] =~ "Patroni" {
          mutate { add_field => { "event_type" => "patroni" } }
        }
    
        if [log_message] =~ "connection received" {
          mutate { add_field => { "event_type" => "connection" } }
        } else if [log_message] =~ "disconnection" {
          mutate { add_field => { "event_type" => "disconnection" } }
        }
    
        if [log_level] == "ERROR" {
          mutate { add_field => { "event_type" => "error" } }
        }
      }
    
      # Xử lý dữ liệu từ Patroni API
      if "patroni_cluster" in [tags] {
        # Thêm các trường tính toán cần thiết
        ruby {
          code => "
            begin
              # Trích xuất thông tin về các members
              if event.get('[patroni_cluster][members]')
                members = event.get('[patroni_cluster][members]')
    
                # Đếm số lượng members
                event.set('member_count', members.length)
    
                # Đếm số lượng replicas
                replicas = members.select { |m| m['role'] == 'replica' }.length
                event.set('replica_count', replicas)
    
                # Đếm số lượng nodes theo state
                running = members.select { |m| m['state'] == 'running' }.length
                event.set('running_nodes', running)
    
                # Tính lag tối đa
                max_lag = 0
                members.each do |m|
                  if m['role'] == 'replica' && m['lag']
                    lag = m['lag'].to_i
                    max_lag = lag if lag > max_lag
                  end
                end
                event.set('max_replication_lag', max_lag)
              end
            rescue => e
              event.set('patroni_parse_error', e.message)
            end
          "
        }
      }
    
      if [tags] == ["postgresql_activity"] {
        mutate {
          remove_field => ["@version", "type"]
        }
      }
    
      if [tags] == ["postgresql_stats"] {
        mutate {
          convert => {
            "xact_commit" => "integer"
            "xact_rollback" => "integer"
            "blks_read" => "integer"
            "blks_hit" => "integer"
            "tup_returned" => "integer"
            "tup_fetched" => "integer"
            "tup_inserted" => "integer"
            "tup_updated" => "integer"
            "tup_deleted" => "integer"
          }
        }
      }
    
      date {
        match => ["timestamp", "ISO8601"]
        target => "@timestamp"
      }
    }
    
    output {
      if "postgresql_logs" in [tags] {
        elasticsearch {
          hosts => ["http://elasticsearch-service.elk-stack:9200"]
          index => "postgresql-logs-%{+YYYY.MM.dd}"
        }
      } else if "patroni_cluster" in [tags] {
        elasticsearch {
          hosts => ["http://elasticsearch-service.elk-stack:9200"]
          index => "patroni-status-%{+YYYY.MM.dd}"
        }
      } else {
        elasticsearch {
          hosts => ["http://elasticsearch-service.elk-stack:9200"]
          index => "postgresql-%{+YYYY.MM.dd}"
        }
      }
    
      stdout { codec => rubydebug }
    }